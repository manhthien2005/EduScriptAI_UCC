@model EduScriptAI.Models.Script
@{
    ViewData["Title"] = "Chỉnh Sửa Kịch Bản";
}

<style>
    .page-title {
        color: #2c3e50;
        font-weight: 600;
        text-align: center;
        margin-bottom: 2rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .info-card {
        background: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }

    .info-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .info-label {
        color: #6c757d;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .info-value {
        color: #2c3e50;
        font-weight: 600;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
    }

    .btn-custom {
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .btn-custom:hover {
        transform: translateY(-2px);
    }

    .btn-save {
        background: #2ecc71;
        border-color: #2ecc71;
        color: white;
    }

    .btn-save:hover {
        background: #27ae60;
        border-color: #27ae60;
        color: white;
    }

    .btn-grammar {
        background: #3498db;
        border-color: #3498db;
        color: white;
    }

    .btn-grammar:hover {
        background: #2980b9;
        border-color: #2980b9;
        color: white;
    }

    .btn-rewrite {
        background: #e67e22;
        border-color: #e67e22;
        color: white;
    }

    .btn-rewrite:hover {
        background: #d35400;
        border-color: #d35400;
        color: white;
    }

    .btn-back {
        background: #95a5a6;
        border-color: #95a5a6;
        color: white;
    }

    .btn-back:hover {
        background: #7f8c8d;
        border-color: #7f8c8d;
        color: white;
    }

    .btn-export {
        background: #9b59b6;
        border-color: #9b59b6;
        color: white;
    }

    .btn-export:hover {
        background: #8e44ad;
        border-color: #8e44ad;
        color: white;
    }

    .toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .toast.bg-success {
        background: #2ecc71 !important;
    }

    .toast.bg-danger {
        background: #e74c3c !important;
    }

    .loading-overlay {
        background: rgba(0,0,0,0.7);
        backdrop-filter: blur(4px);
    }

    .loading-spinner {
        width: 3rem;
        height: 3rem;
    }
</style>

<div class="container py-4">
    <h1 class="page-title">Chỉnh sửa kịch bản</h1>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <a asp-action="Manage" class="btn btn-custom btn-back">
            <i class="fas fa-arrow-left me-2"></i>Quay lại
        </a>
        <a asp-action="Export" asp-route-id="@Model.Id" class="btn btn-custom btn-export">
            <i class="fas fa-file-export me-2"></i>Xuất Word
        </a>
    </div>

    <div class="card info-card mb-4">
        <div class="card-header bg-white">
            <h5 class="mb-0 text-center">Thông tin kịch bản</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <p class="mb-2"><span class="info-label">Từ khóa:</span></p>
                    <p class="info-value">@Model.Keywords</p>
                </div>
                <div class="col-md-4">
                    <p class="mb-2"><span class="info-label">Cấp học:</span></p>
                    <p class="info-value">@Model.Level</p>
                </div>
                <div class="col-md-4">
                    <p class="mb-2"><span class="info-label">Loại:</span></p>
                    <p class="info-value">@Model.Type</p>
                </div>
            </div>
        </div>
    </div>

    <form id="editForm" asp-action="Edit" method="post">
        <input type="hidden" name="id" value="@Model.Id" />
        <input type="hidden" name="actionType" value="save" />
        
        <div class="mb-4">
            <label for="content" class="form-label fw-bold">Nội dung kịch bản</label>
            <textarea id="content" name="content" class="form-control" rows="20">@Model.Content</textarea>
        </div>

        <div class="action-buttons">
            <button type="submit" class="btn btn-custom btn-save">
                <i class="fas fa-save me-2"></i>Lưu thay đổi
            </button>
            <button type="button" class="btn btn-custom btn-grammar" onclick="checkGrammar()">
                <i class="fas fa-spell-check me-2"></i>Kiểm tra ngữ pháp
            </button>
            <button type="button" class="btn btn-custom btn-rewrite" onclick="showRewriteModal()">
                <i class="fas fa-edit me-2"></i>Viết lại
            </button>
        </div>
    </form>
</div>

<!-- Modal Viết lại -->
<div class="modal fade" id="rewriteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold">Viết lại kịch bản</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="instruction" class="form-label fw-bold">Hướng dẫn viết lại</label>
                    <textarea id="instruction" class="form-control" rows="4" placeholder="Nhập hướng dẫn viết lại kịch bản..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-custom btn-back" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-custom btn-rewrite" onclick="rewriteScript()">Viết lại</button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastTitle">Thông báo</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage"></div>
    </div>
</div>

<!-- Loading Overlay -->
<div id="loadingOverlay" class="position-fixed top-0 start-0 w-100 h-100 d-none loading-overlay" style="z-index: 9999;">
    <div class="position-absolute top-50 start-50 translate-middle text-center text-white">
        <div class="spinner-border loading-spinner" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div class="mt-3 h4" id="loadingMessage">Đang xử lý...</div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.tiny.cloud/1/f796ndfglz66thjm1lmxb7kvpbvt6t4sw4vzei35t4arzhos/tinymce/6/tinymce.min.js"></script>
    <script>
        // Khởi tạo TinyMCE
        tinymce.init({
            selector: '#content',
            height: 500,
            plugins: 'lists link image table code help wordcount',
            toolbar: 'undo redo | blocks | bold italic | alignleft aligncenter alignright | indent outdent | bullist numlist | code | table',
            content_style: `
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif; 
                    font-size: 16px; 
                }
                .note {
                    background: #f8f9fa;
                    border-left: 4px solid #3498db;
                    padding: 1rem;
                    margin: 1rem 0;
                    border-radius: 4px;
                }
                .note-title {
                    color: #2c3e50;
                    font-weight: 600;
                    margin-bottom: 0.5rem;
                }
                .note-content {
                    color: #34495e;
                }
                .note-item {
                    margin: 0.5rem 0;
                    padding-left: 1.5rem;
                    position: relative;
                }
                .note-item:before {
                    content: "•";
                    position: absolute;
                    left: 0;
                    color: #3498db;
                }
            `,
            apiKey: 'f796ndfglz66thjm1lmxb7kvpbvt6t4sw4vzei35t4arzhos'
        });

        // Hiển thị thông báo
        function showToast(title, message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');
            
            toastTitle.textContent = title;
            toastMessage.textContent = message;
            toast.className = `toast ${type === 'error' ? 'bg-danger text-white' : 'bg-success text-white'}`;
            
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
        }

        // Hiển thị/ẩn loading
        function toggleLoading(show, message = 'Đang xử lý...') {
            const overlay = document.getElementById('loadingOverlay');
            const loadingMessage = document.getElementById('loadingMessage');
            
            loadingMessage.textContent = message;
            overlay.classList.toggle('d-none', !show);
        }

        // Kiểm tra ngữ pháp
        function checkGrammar() {
            const content = tinymce.get('content').getContent();
            toggleLoading(true, 'Đang kiểm tra ngữ pháp...');
            
            fetch(`/Script/Edit?id=@Model.Id&actionType=checkGrammar`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content })
            })
            .then(response => response.json())
            .then(data => {
                if (data.errors && data.errors.length > 0) {
                    showToast('Lỗi ngữ pháp', data.errors.join('\n'), 'error');
                } else {
                    showToast('Thành công', 'Không tìm thấy lỗi ngữ pháp!');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Lỗi', 'Có lỗi xảy ra khi kiểm tra ngữ pháp!', 'error');
            })
            .finally(() => {
                toggleLoading(false);
            });
        }

        // Viết lại kịch bản
        function rewriteScript() {
            const content = tinymce.get('content').getContent();
            const instruction = document.getElementById('instruction').value;
            
            if (!instruction) {
                showToast('Lỗi', 'Vui lòng nhập hướng dẫn viết lại!', 'error');
                return;
            }

            toggleLoading(true, 'Đang viết lại kịch bản...');
            const modal = bootstrap.Modal.getInstance(document.getElementById('rewriteModal'));

            fetch(`/Script/Edit?id=@Model.Id&actionType=rewrite`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content, instruction })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.content) {
                    tinymce.get('content').setContent(data.content);
                    modal.hide();
                    showToast('Thành công', 'Đã viết lại kịch bản thành công!');
                } else {
                    throw new Error('No content in response');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Lỗi', 'Có lỗi xảy ra khi viết lại kịch bản!', 'error');
            })
            .finally(() => {
                toggleLoading(false);
            });
        }

        // Xử lý form submit
        document.getElementById('editForm').addEventListener('submit', function(e) {
            e.preventDefault();
            toggleLoading(true, 'Đang lưu thay đổi...');
            
            const content = tinymce.get('content').getContent();
            
            fetch(`/Script/Edit?id=@Model.Id&actionType=save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ content })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                showToast('Thành công', 'Đã lưu thay đổi thành công!');
                setTimeout(() => window.location.reload(), 1000);
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Lỗi', 'Có lỗi xảy ra khi lưu thay đổi!', 'error');
            })
            .finally(() => {
                toggleLoading(false);
            });
        });
    </script>
} 